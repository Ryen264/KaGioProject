#include <iostream>
#include <vector>
#include <string>

#include <conio.h>
#include <Windows.h>
using namespace std;

//Kích thước console
const int SCREEN_WIDTH = 120;
const int SCREEN_HEIGHT = 30;

//Hàm cấu hình console
void Configure()					//hàm cấu hình, thiết lập kích thước console và thay đổi bảng màu
{
	//
	system("MODE 120, 30");									//thiết lập kích thước console
	system("color 89");
	//

	HANDLE hConsoleOutput = GetStdHandle(STD_OUTPUT_HANDLE);

	//Thay đổi bảng màu
	//
	CONSOLE_SCREEN_BUFFER_INFOEX csbiex;
	csbiex.cbSize = sizeof(CONSOLE_SCREEN_BUFFER_INFOEX);

	GetConsoleScreenBufferInfoEx(hConsoleOutput, &csbiex);
	csbiex.ColorTable[0] = RGB(0, 188, 212);
	csbiex.ColorTable[1] = RGB(63, 81, 181);
	csbiex.ColorTable[2] = RGB(255, 87, 34);
	csbiex.ColorTable[3] = RGB(255, 235, 59);
	csbiex.ColorTable[4] = RGB(76, 175, 80);
	csbiex.ColorTable[5] = RGB(156, 39, 176);
	csbiex.ColorTable[6] = RGB(237, 28, 36);
	csbiex.ColorTable[7] = RGB(242, 242, 242);
	csbiex.ColorTable[8] = RGB(248, 248, 248);
	csbiex.ColorTable[9] = RGB(20, 20, 20);
	csbiex.ColorTable[10] = RGB(50, 44, 46);
	csbiex.ColorTable[11] = RGB(225, 225, 225);
	SetConsoleScreenBufferInfoEx(hConsoleOutput, &csbiex);
	//

	//Thay đổi kích thước font
	//
	CONSOLE_FONT_INFOEX cfiex;
	cfiex.cbSize = sizeof(CONSOLE_FONT_INFOEX);

	GetCurrentConsoleFontEx(hConsoleOutput, 0, &cfiex);
	cfiex.dwFontSize.Y = 20;									//Độ zoom console
	SetCurrentConsoleFontEx(hConsoleOutput, 0, &cfiex);
	//
}

//Các biến và hàm hiển thị
WORD* pColor = new WORD[SCREEN_WIDTH * SCREEN_HEIGHT];			//lưu màu sắc
wchar_t* pBuffer = new wchar_t[SCREEN_WIDTH * SCREEN_HEIGHT];	//lưu kí tự

//Tạo console screen buffer
HANDLE hConsole = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
//Biến hiển thị
DWORD dwBytesWritten = 0;

void Display(wchar_t* pBuffer, WORD* pColor)
{
	for (int j = 0; j < SCREEN_HEIGHT; j++)
	{
		for (int i = 0; i < SCREEN_WIDTH; i++)
		{
			COORD cPos;
			cPos.X = i;
			cPos.Y = j;
			WriteConsoleOutputAttribute(hConsole, &pColor[j * SCREEN_WIDTH + i], 1, cPos, &dwBytesWritten);
		}
	}

	WriteConsoleOutputCharacter(hConsole, pBuffer, SCREEN_WIDTH * SCREEN_HEIGHT, { 0,0 }, &dwBytesWritten);
}

//Vị trí hiện tại của con trỏ
int currentX = 0;
int currentY = 0;


//struct quân cờ gồm tọa độ x, y và màu quân (1: trắng, -1: đen, 0: trống)
struct stone
{
	int x;
	int y;
	int color;
};

//Bàn cờ và kích thước
const int BOARD_SZ = 13;

//Hàm khởi tạo bàn cờ
int board[BOARD_SZ][BOARD_SZ] = { {0} };

void gotoXY(int x, int y)
{
	COORD coord;
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

//Hàm nước đi tiếp theo
stone Play(stone preMove, int level)	//level (Human) = 0; level (Computer) = 1/2/3
{
	stone newMove = { preMove.x, preMove.y, (-1) * preMove.color };
	switch (level)
	{
	case 1:
	{
		//Thuat toan esay
		break;
	}
	case 2:
	{
		//Thuat toan easy easy
		break;
	}
	case 3:
	{
		//Thuat toan very easy easy
	}
	case 0:
	{
		while (1)
		{
			int move = toupper(_getch());
			if (move == 'S' || move == 80)
				if (preMove.y + 1 < BOARD_SZ)
				{
					gotoXY(currentX, currentY + 1);
					newMove.y = preMove.y + 1;
				}
			if (move == 'W' || move == 72)
				if (preMove.y - 1 > 0)
				{
					gotoXY(currentX, currentY - 1);
					newMove.y = preMove.y - 1;
				}
			if (move == 'A' || move == 75)
				if (preMove.x - 1 > 0)
				{
					gotoXY(currentX - 1, currentY);
					newMove.x = preMove.x - 1;
				}
			if (move == 'D' || move == 77)
				if (preMove.x + 1 < BOARD_SZ)
				{
					gotoXY(currentX + 1, currentY);
					newMove.x = preMove.x + 1;
				}
			if (move == 13)
				break;
		}
	}
	}
	//Hiển thị
	return newMove;
}

int select(int maxSelect)
{
	int select = 1;
	while (1)
	{
		int move = toupper(_getch());
		if (move == 'S' || move == 80)
		{
			select++;
			if (select > maxSelect)
				select -= maxSelect;
			gotoXY(currentX, currentY + select);
			//Hiệu ứng
		}
		if (move == 'W' || move == 72)
		{
			select--;
			if (select < 1)
				select += maxSelect;
			gotoXY(currentX, currentY + select);
			//Hiệu ứng
		}
		if (move == 13)
			return select;
	}
}

void NewGame();
//
	void enterPlayers();
	///
		void printRule();
		int play2Players(string player1, string player2);
		//void pause();
		//int checkBoard(...)
		//void playAgain();
	///
	void enterComLevel();
	///
		//void printRule();
		int playwithCom(int level);
		//void pause();
		//int checkBoard(...)
		//void playAgain();
	///
//

void ContinueGame();

void LoadGame();
//
	void printList(vector<string>& saveList);
//

void Setting();
//

//

void Help();

void About();

void Exit();

int main()
{
	//Cấu hình console
	Configure();

	//Clear screen
	//Intro

	while (1)
	{
		//Menu
			//Setup
		system("cls");
		cout << "MENU" << endl;
		cout << "New game" << endl;
		cout << "Continue game" << endl;
		cout << "Load game" << endl;
		cout << "Setting" << endl;
		cout << "Help" << endl;
		cout << "About" << endl;
		cout << "Exit" << endl;

		//Set vị trí con trỏ
		gotoXY(0, 1);


			//Selection
		int menuSelect = 7;
		switch (select(menuSelect))
		{
		case 1:
		{
			NewGame();
			break;
		}case 2:
		{
			//Continue game
			break;
		}case 3:
		{
			//Load game
			break;
		}case 4:
		{
			Setting();
			break;
		}case 5:
		{
			Help();
			break;
		}case 6:
		{
			About();
			break;
		}case 7:
		{
			Exit();
			break;
		}
		}

		//Display

	}

	//Clear screen
	//Outro

	return 0;
}

void NewGame()
{
	int mode = 2;
	while (1)
	{
		//Setup
		system("cls");
		cout << "MODE?" << endl;
		cout << "2 players" << endl;
		cout << "play with computer" << endl;
		cout << "back" << endl;

		//Set vị trí con trỏ
		gotoXY(0, 1);

		//Selection
		switch (select(mode + 1))
		{
		case 1:
		{
			enterPlayers();
			break;
		}case 2:
		{
			enterComLevel();
			break;
		}case 3:
			return;
		}

		//Display
	}
}
//
void enterPlayers()
{
	//Setup
	system("cls");
	cout << "2 PLAYERS" << endl;
	cout << "Player 1: ..." << endl;
	cout << "Player 2: ..." << endl;
	cout << "back" << endl;

	//Set vị trí con trỏ
	gotoXY(0, 1);

	//Selection
	select(1);

	//Display
}
///
void printRule();
int play2Players(string player1, string player2);
///
void enterComLevel()
{
	int levels = 3;
	//Setup
	system("cls");
	cout << "LEVEL?" << endl;
	cout << "easy" << endl;
	cout << "easy easy" << endl;
	cout << "very easy easy" << endl;
	cout << "back" << endl;

	//Set vị trí con trỏ
	gotoXY(0, 1);

	//Selection
	switch (select(levels + 1))
	{
	case 1:
	{
		//easy
		break;
	}case 2:
	{
		//medium
		break;
	}case 3:
	{
		//hard
		break;
	}
	}

	//Display
}
///
//void printRule();
int playwithCom(int level);
///
//

void ContinueGame();

void LoadGame();
//
void printList(vector<string>& saveList);
//

void Setting()
{
	int setting = 3;
	while (1)
	{
		//Setup
		system("cls");
		cout << "SETTING" << endl;
		cout << "Background music		On/Off" << endl;
		cout << "Effect music			On/Off" << endl;
		cout << "Theme				Dark/Bright" << endl;
		cout << "back" << endl;

		//Set vị trí con trỏ
		gotoXY(0, 1);

		//Selection
		switch (select(setting + 1))
		{
		case 1:
		{
			//on/off bk music
			break;
		}case 2:
		{
			//on/off ef music
			break;
		}case 3:
		{
			//set theme
			break;
		}case 4:
			return;
		}

		//Display
	}
}

void Help()
{
	//Setup
	system("cls");
	cout << "HELP" << endl;
	cout << "..." << endl;

	//Set vị trí con trỏ
	currentX = 21;
	currentY = 6;
	gotoXY(currentX, currentY);

	//Press any key
	int ch = _getch();

	//Display
}

void About()
{
	//Setup
	system("cls");
	cout << "ABOUT" << endl;
	cout << "..." << endl;

	//Set vị trí con trỏ
	currentX = 21;
	currentY = 6;
	gotoXY(currentX, currentY);

	//Press any key
	int ch = _getch();

	//Display
}

void Exit()
{
	//Setup
	system("cls");
	cout << "EXIT?" << endl;
	cout << "Yes" << endl;
	cout << "No" << endl;

	//Set vị trí con trỏ
	gotoXY(0, 1);

	//Selection
	int exitSelect = 2;
	if (select(exitSelect) == 1)
	{
		system("cls");
		exit(0);
	}

	//Display
}


